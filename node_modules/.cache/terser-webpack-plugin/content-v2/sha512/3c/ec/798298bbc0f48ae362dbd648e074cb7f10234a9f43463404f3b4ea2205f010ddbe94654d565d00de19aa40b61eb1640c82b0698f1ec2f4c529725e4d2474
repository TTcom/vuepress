{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{174:function(t,n,s){\"use strict\";s.r(n);var a=s(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,s=t._self._c||n;return s(\"div\",{staticClass:\"content\"},[s(\"h3\",{attrs:{id:\"使用git遇到的问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用git遇到的问题\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 使用git遇到的问题\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"问题一\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#问题一\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 问题一\")]),t._v(\" \"),s(\"p\",[t._v(\"在git push的点时候报错\"),s(\"br\"),t._v(\"\\n经常遇到该报错：Connection reset by 13.229.188.59 port 22 fatal: Could not read from remote repository.\\n意为连接远程仓库失败；可能是网络问题只需等待网络恢复即可\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"或重新生成ssh\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#或重新生成ssh\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 或重新生成ssh\")]),t._v(\" \"),s(\"p\",[t._v('更新代码git pull（如果git pull都失败的话确实是网络问题）  或者 重置ssh——命令：ssh-keygen -t rsa -C \"xxx@xxx.com\"')]),t._v(\" \"),s(\"h3\",{attrs:{id:\"问题二git上传忽略node-modules\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#问题二git上传忽略node-modules\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" 问题二git上传忽略node_modules\")]),t._v(\" \"),s(\"p\",[t._v(\"1、在需要创建 .gitignore 文件的文件夹, 右键选择Git Bash 进入命令行，进入项目所在目录。\"),s(\"br\")]),t._v(\" \"),s(\"p\",[t._v(\"2、输入 touch .gitignore ，生成“.gitignore”文件。\"),s(\"br\")]),t._v(\" \"),s(\"p\",[t._v(\"3、在”.gitignore” 文件里输入你要忽略的文件夹及其文件就可以了。（注意格式）\"),s(\"br\"),t._v(\"\\n我的.gitignore\"),s(\"br\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"DS_Store\\n \\nnode_modules\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"\\n \\ndist\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"\\n\\nnpm\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"debug\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"log\\n\\n\")])])]),s(\"p\",[t._v(\"4、下面我们看看常用的规则：\"),s(\"br\"),t._v(\"\\n1）/mtk/               过滤整个文件夹\"),s(\"br\"),t._v(\"\\n2）*.zip                过滤所有.zip文件\"),s(\"br\"),t._v(\"\\n3）/mtk/do.c         过滤某个具体文件\"),s(\"br\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[t._v(\"\\nnode_modules\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" 表示过滤这个文件夹\\n \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"zip 过滤zip后缀文件\\n \\ndemo\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"html 过滤该文件\\n \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"src\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" 不过滤该文件夹\\n \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"js 不过滤java源文件\\n \\n \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"html 不过滤该文件\\n\\n\")])])]),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"）配置语法：\\n以斜杠“\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"”开头表示目录；\\n以星号“\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"”通配多个字符；\\n以问号“\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\"”通配单个字符\\n以方括号“\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"”包含单个字符的匹配列表；\\n以叹号“\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"”表示不忽略\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"跟踪\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"匹配到的文件或目录；\\n\\n此外，git 对于 \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\"）示例说明\\na）规则：fd1\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/*\\n说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；\\nb）规则：/fd1/*\\n说明：忽略根目录下的 /fd1/ 目录的全部内容；\\nc）规则：\\n/*\\n!.gitignore\\n!/fw/bin/\\n!/fw/sf/\\n说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；\\n\\n5、操作方法\\n\\n一是常规的windows操作\\n\\n根目录下创建gitignore.txt；\\n编辑gitignore.txt，写下你的规则，例如加上node_modules/；\\n打开命令行窗口，切换到根目录（可以直接在文件夹上面的地址栏输入cmd回车）；\\n执行命令ren gitignore.txt .gitignore。\\n二是用Git Bash\\n\\n根目录下右键选择“Git Bash Here”进入bash命令窗口；\\n输入vim .gitignore命令，打开文件（没有文件会自动创建）；\\n按i键切换到编辑状态，输入规则，例如node_modules/，然后按Esc键退出编辑，输入:wq保存退出。\\n最后需要强调的一点是，如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。\\n简单来说，出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。因此一定要养成在项目开始就创建.gitignore文件的习惯，否则一旦push，处理起来会非常麻烦。\\n\")])])])]),s(\"p\",[s(\"a\",{attrs:{href:\"https://blog.csdn.net/qq_37818095/article/details/82145062\",target:\"view_window\"}},[t._v(\"如何在Vue项目中使用vw实现移动端适配\")])])])}],!1,null,null,null);n.default=e.exports}}]);","extractedComments":[]}